#!/usr/bin/env perl

# ===================================================================
# File:		bin/database/verify-forum-cleanup
# Purpose:	Verify that all forum demo data has been removed
# 
# This script checks that all forum-related demo data has been
# successfully deleted from the database, with color-coded output.
# Author:	Kai Baker <eigenspaces@gmail.com>
# 
# ShinyCMS is free software; you can redistribute it and/or modify it
# under the terms of either the GPL 2.0 or the Artistic License 2.0
# ===================================================================

use strict;
use warnings;

# CPAN modules
use Term::ANSIColor qw(:constants);
use DateTime::Duration;

# Load local helper lib and get connected schema object
use FindBin qw( $Bin );
use lib "$Bin/../../lib";
require 'helpers.pl';  ## no critic

my $schema = get_schema();

# Initialize counters
my $items_found = 0;
my $items_removed = 0;
my $total_checks = 0;

# ANSI color codes
my $RESET = RESET;
my $GREEN = GREEN;
my $RED = RED;
my $YELLOW = YELLOW;
my $CYAN = CYAN;
my $BOLD = BOLD;
my $DIM = FAINT;

print "${BOLD}${CYAN}=" x 70 . "${RESET}\n";
print "${BOLD}${CYAN}FORUM DATA CLEANUP VERIFICATION${RESET}\n";
print "${CYAN}=" x 70 . "${RESET}\n\n";
print "Checking that all forum demo data has been removed from the database...\n\n";

# Check Forum Sections
print "${BOLD}${YELLOW}Forum Sections:${RESET}\n";
print "${DIM}" . "-" x 50 . "${RESET}\n";

my @section_checks = (
    { name => 'Hardware', url_name => 'hardware' },
    { name => 'Software', url_name => 'software' },
);

foreach my $section_data (@section_checks) {
    $total_checks++;
    my $section = $schema->resultset('ForumSection')->find({
        url_name => $section_data->{url_name}
    });
    
    if ($section) {
        print "  ${RED}✗ FOUND:${RESET} Section '$section_data->{name}' (url: $section_data->{url_name}) ";
        print "${RED}still exists${RESET} - ID: " . $section->id . "\n";
        $items_found++;
    } else {
        print "  ${GREEN}✓ REMOVED:${RESET} Section '$section_data->{name}' (url: $section_data->{url_name})\n";
        $items_removed++;
    }
}

print "\n";

# Check Forums
print "${BOLD}${YELLOW}Forums:${RESET}\n";
print "${DIM}" . "-" x 50 . "${RESET}\n";

my @forum_checks = (
    { name => 'Laptops',  url_name => 'laptops',  section => 'Hardware' },
    { name => 'Desktops', url_name => 'desktops', section => 'Hardware' },
    { name => 'Linux',    url_name => 'linux',    section => 'Software' },
);

foreach my $forum_data (@forum_checks) {
    $total_checks++;
    my $forum = $schema->resultset('Forum')->find({
        url_name => $forum_data->{url_name}
    });
    
    if ($forum) {
        print "  ${RED}✗ FOUND:${RESET} Forum '$forum_data->{name}' ";
        print "${RED}still exists${RESET} - ID: " . $forum->id . "\n";
        $items_found++;
    } else {
        print "  ${GREEN}✓ REMOVED:${RESET} Forum '$forum_data->{name}' in section '$forum_data->{section}'\n";
        $items_removed++;
    }
}

print "\n";

# Check Forum Posts
print "${BOLD}${YELLOW}Forum Posts:${RESET}\n";
print "${DIM}" . "-" x 50 . "${RESET}\n";

my @post_checks = (
    { title => 'Laptop Contest!', url_title => 'laptop-contest' },
    { title => 'No talking',      url_title => 'no-talking' },
    { title => 'Future post',     url_title => 'future' },
    { title => 'BIOS POST',       url_title => 'beep-beep-beep' },
);

foreach my $post_data (@post_checks) {
    $total_checks++;
    my $post = $schema->resultset('ForumPost')->find({
        url_title => $post_data->{url_title}
    });
    
    if ($post) {
        print "  ${RED}✗ FOUND:${RESET} Post '$post_data->{title}' ";
        print "${RED}still exists${RESET} - ID: " . $post->id . "\n";
        $items_found++;
        
        # If post exists, check for associated discussion
        my $discussion = $schema->resultset('Discussion')->find({
            resource_id   => $post->id,
            resource_type => 'ForumPost',
        });
        
        if ($discussion) {
            print "    ${DIM}${RED}└─ Discussion still attached (ID: " . $discussion->id . ")${RESET}\n";
        }
    } else {
        print "  ${GREEN}✓ REMOVED:${RESET} Post '$post_data->{title}'\n";
        $items_removed++;
    }
}

print "\n";

# Check for orphaned Discussions
print "${BOLD}${YELLOW}Checking for Orphaned Discussions:${RESET}\n";
print "${DIM}" . "-" x 50 . "${RESET}\n";

my @discussions = $schema->resultset('Discussion')->search({
    resource_type => 'ForumPost'
})->all;

my $orphaned_discussions = 0;
foreach my $discussion (@discussions) {
    my $post = $schema->resultset('ForumPost')->find($discussion->resource_id);
    if (!$post) {
        print "  ${YELLOW}⚠ WARNING:${RESET} Orphaned discussion found (ID: " . $discussion->id . ")\n";
        $orphaned_discussions++;
        
        # Check for comments in orphaned discussion
        my $comment_count = $discussion->comments->count;
        if ($comment_count > 0) {
            print "    ${DIM}${YELLOW}└─ Contains $comment_count comment(s)${RESET}\n";
        }
    }
}

if ($orphaned_discussions == 0) {
    print "  ${GREEN}✓${RESET} No orphaned discussions found\n";
}

$total_checks += $orphaned_discussions;

print "\n";

# Check for Tags
print "${BOLD}${YELLOW}Checking for Orphaned Tags:${RESET}\n";
print "${DIM}" . "-" x 50 . "${RESET}\n";

my @tagsets = $schema->resultset('Tagset')->search({
    resource_type => 'ForumPost'
})->all;

my $orphaned_tagsets = 0;
foreach my $tagset (@tagsets) {
    my $post = $schema->resultset('ForumPost')->find($tagset->resource_id);
    if (!$post) {
        print "  ${YELLOW}⚠ WARNING:${RESET} Orphaned tagset found (ID: " . $tagset->id . ")\n";
        $orphaned_tagsets++;
        
        # Check for tags in orphaned tagset
        my @tags = $tagset->tags->all;
        if (@tags) {
            my $tag_list = join(', ', map { $_->tag } @tags);
            print "    ${DIM}${YELLOW}└─ Tags: $tag_list${RESET}\n";
        }
    }
}

if ($orphaned_tagsets == 0) {
    print "  ${GREEN}✓${RESET} No orphaned tagsets found\n";
}

$total_checks += $orphaned_tagsets;

print "\n";

# Summary Section
print "${BOLD}${CYAN}=" x 70 . "${RESET}\n";
print "${BOLD}VERIFICATION SUMMARY${RESET}\n";
print "${CYAN}" . "-" x 70 . "${RESET}\n";

print "Total items checked: ${BOLD}$total_checks${RESET}\n";
print "Items successfully removed: ${GREEN}${BOLD}$items_removed${RESET}\n";
print "Items still in database: ${RED}${BOLD}$items_found${RESET}\n";

if ($orphaned_discussions > 0 || $orphaned_tagsets > 0) {
    my $orphaned_total = $orphaned_discussions + $orphaned_tagsets;
    print "Orphaned items found: ${YELLOW}${BOLD}$orphaned_total${RESET}\n";
}

print "\n";

# Final Status
if ($items_found == 0 && $orphaned_discussions == 0 && $orphaned_tagsets == 0) {
    print "${GREEN}${BOLD}✓ SUCCESS: All forum demo data has been successfully removed!${RESET}\n";
    print "${GREEN}The database is clean.${RESET}\n";
} elsif ($items_found > 0) {
    print "${RED}${BOLD}✗ FAILURE: Forum demo data still exists in the database!${RESET}\n";
    print "${RED}Please run the cleanup script to remove remaining items.${RESET}\n";
} else {
    print "${YELLOW}${BOLD}⚠ WARNING: Main data removed but orphaned items remain!${RESET}\n";
    print "${YELLOW}Consider running a deep cleanup to remove orphaned records.${RESET}\n";
}

print "${CYAN}=" x 70 . "${RESET}\n";

# Exit with appropriate code
# 0 = all clean, 1 = main items remain, 2 = only orphaned items remain
if ($items_found == 0 && $orphaned_discussions == 0 && $orphaned_tagsets == 0) {
    exit 0;
} elsif ($items_found > 0) {
    exit 1;
} else {
    exit 2;
}