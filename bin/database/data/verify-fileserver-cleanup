#!/usr/bin/env perl

# ===================================================================
# File:		bin/database/verify-fileserver-cleanup
# Purpose:	Verify that all fileserver demo data has been removed
# 
# Author:	Kai Baker <eigenspaces@gmail.com>
# 
# This script checks that all fileserver-related demo data has been
# successfully deleted from the database, with color-coded output.
# ===================================================================

use strict;
use warnings;

# CPAN modules
use Term::ANSIColor qw(:constants);

# Load local helper lib and get connected schema object
use FindBin qw( $Bin );
use lib "$Bin/../../lib";
require 'helpers.pl';  ## no critic

my $schema = get_schema();

# Initialize counters
my $items_found = 0;
my $items_removed = 0;
my $total_checks = 0;

# ANSI color codes
my $RESET = RESET;
my $GREEN = GREEN;
my $RED = RED;
my $YELLOW = YELLOW;
my $CYAN = CYAN;
my $BOLD = BOLD;
my $DIM = FAINT;
my $MAGENTA = MAGENTA;
my $BLUE = BLUE;

print "${BOLD}${CYAN}=" x 70 . "${RESET}\n";
print "${BOLD}${CYAN}FILESERVER DATA CLEANUP VERIFICATION${RESET}\n";
print "${CYAN}=" x 70 . "${RESET}\n\n";
print "Checking that all fileserver demo data has been removed from the database...\n\n";

# Check Demo Users
print "${BOLD}${YELLOW}Demo Users:${RESET}\n";
print "${DIM}" . "-" x 50 . "${RESET}\n";

my @user_checks = (
    { username => 'first',  email => 'first@example.com' },
    { username => 'viewer', email => 'viewer@example.com' },
);

foreach my $user_data (@user_checks) {
    $total_checks++;
    my $user = $schema->resultset('User')->find({
        username => $user_data->{username}
    });
    
    if ($user) {
        print "  ${RED}✗ FOUND:${RESET} User '$user_data->{username}' ";
        print "${RED}still exists${RESET} - ID: " . $user->id;
        print ", Email: " . $user->email . "\n";
        $items_found++;
        
        # Check for user accesses
        my $access_count = $user->user_accesses->count;
        if ($access_count > 0) {
            print "    ${DIM}${RED}├─ Has $access_count access permission(s)${RESET}\n";
            
            my @accesses = $user->user_accesses->all;
            foreach my $ua (@accesses) {
                my $access = $schema->resultset('Access')->find($ua->access);
                my $name = $access ? $access->access : 'Unknown';
                my $expires = $ua->expires || 'Never';
                print "    ${DIM}${RED}│  └─ Access: '$name', Expires: $expires${RESET}\n";
            }
        }
        
        # Check for file access logs
        my $file_access_count = $user->file_accesses->count;
        if ($file_access_count > 0) {
            print "    ${DIM}${RED}└─ Has $file_access_count file access log(s)${RESET}\n";
        }
    } else {
        print "  ${GREEN}✓ REMOVED:${RESET} User '$user_data->{username}'\n";
        $items_removed++;
    }
}

print "\n";

# Check Access Groups
print "${BOLD}${YELLOW}Access Groups:${RESET}\n";
print "${DIM}" . "-" x 50 . "${RESET}\n";

my @access_checks = (
    'Eternal',
    'Expired',
    'Unexpired',
    'Exclusive',
);

foreach my $access_name (@access_checks) {
    $total_checks++;
    my $access = $schema->resultset('Access')->find({
        access => $access_name
    });
    
    if ($access) {
        print "  ${RED}✗ FOUND:${RESET} Access group '$access_name' ";
        print "${RED}still exists${RESET} - ID: " . $access->id . "\n";
        $items_found++;
        
        # Check how many users have this access
        my $user_count = $schema->resultset('UserAccess')->search({
            access => $access->id
        })->count;
        
        if ($user_count > 0) {
            print "    ${DIM}${YELLOW}└─ Referenced by $user_count user(s)${RESET}\n";
            
            # Show which users
            my @user_accesses = $schema->resultset('UserAccess')->search({
                access => $access->id
            })->all;
            
            foreach my $ua (@user_accesses) {
                my $user = $schema->resultset('User')->find($ua->user);
                if ($user) {
                    my $expires = $ua->expires || 'Never';
                    print "    ${DIM}${YELLOW}   └─ User: " . $user->username;
                    print ", Expires: $expires${RESET}\n";
                }
            }
        }
    } else {
        print "  ${GREEN}✓ REMOVED:${RESET} Access group '$access_name'\n";
        $items_removed++;
    }
}

print "\n";

# Check for orphaned UserAccess records
print "${BOLD}${YELLOW}Checking for Orphaned User Access Records:${RESET}\n";
print "${DIM}" . "-" x 50 . "${RESET}\n";

my @all_user_accesses = $schema->resultset('UserAccess')->all;
my $orphaned_user_accesses = 0;

foreach my $ua (@all_user_accesses) {
    my $user = $schema->resultset('User')->find($ua->user);
    my $access = $schema->resultset('Access')->find($ua->access);
    
    if (!$user || !$access) {
        $orphaned_user_accesses++;
        print "  ${YELLOW}⚠ WARNING:${RESET} Orphaned UserAccess record found\n";
        print "    ${DIM}├─ User ID: " . $ua->user;
        print " (" . ($user ? $user->username : 'MISSING') . ")${RESET}\n";
        print "    ${DIM}└─ Access ID: " . $ua->access;
        print " (" . ($access ? $access->access : 'MISSING') . ")${RESET}\n";
    }
}

if ($orphaned_user_accesses == 0) {
    print "  ${GREEN}✓${RESET} No orphaned user access records found\n";
}

$total_checks += $orphaned_user_accesses;

print "\n";

# Check for File Access Logs
print "${BOLD}${YELLOW}Checking for File Access Logs:${RESET}\n";
print "${DIM}" . "-" x 50 . "${RESET}\n";

# Check for any file access logs from demo users
my $file_access_count = 0;
foreach my $user_data (@user_checks) {
    my $user = $schema->resultset('User')->find({
        username => $user_data->{username}
    });
    
    if ($user) {
        my @file_accesses = $user->file_accesses->all;
        foreach my $fa (@file_accesses) {
            $file_access_count++;
            print "  ${YELLOW}⚠ WARNING:${RESET} File access log found for user '" . $user->username . "'\n";
            print "    ${DIM}├─ Access Group: " . $fa->access_group . "${RESET}\n";
            print "    ${DIM}├─ File: " . $fa->filepath . "/" . $fa->filename . "${RESET}\n";
            print "    ${DIM}├─ IP: " . $fa->ip_address . "${RESET}\n";
            print "    ${DIM}└─ Accessed: " . ($fa->accessed || 'Unknown') . "${RESET}\n";
        }
    }
}

if ($file_access_count == 0) {
    print "  ${GREEN}✓${RESET} No file access logs from demo users found\n";
} else {
    $items_found += $file_access_count;
}

$total_checks += $file_access_count;

print "\n";

# Check for any orphaned file access logs
print "${BOLD}${YELLOW}Checking for Orphaned File Access Logs:${RESET}\n";
print "${DIM}" . "-" x 50 . "${RESET}\n";

my @all_file_accesses = $schema->resultset('FileAccess')->all;
my $orphaned_file_logs = 0;

foreach my $fa (@all_file_accesses) {
    my $user = $schema->resultset('User')->find($fa->user);
    if (!$user) {
        $orphaned_file_logs++;
        print "  ${YELLOW}⚠ WARNING:${RESET} Orphaned file access log found\n";
        print "    ${DIM}├─ User ID: " . $fa->user . " (MISSING)${RESET}\n";
        print "    ${DIM}├─ Access Group: " . $fa->access_group . "${RESET}\n";
        print "    ${DIM}└─ File: " . $fa->filepath . "/" . $fa->filename . "${RESET}\n";
    }
}

if ($orphaned_file_logs == 0) {
    print "  ${GREEN}✓${RESET} No orphaned file access logs found\n";
}

$total_checks += $orphaned_file_logs;

print "\n";

# Summary Section
print "${BOLD}${CYAN}=" x 70 . "${RESET}\n";
print "${BOLD}VERIFICATION SUMMARY${RESET}\n";
print "${CYAN}" . "-" x 70 . "${RESET}\n";

print "Total items checked: ${BOLD}$total_checks${RESET}\n";
print "Items successfully removed: ${GREEN}${BOLD}$items_removed${RESET}\n";
print "Items still in database: ${RED}${BOLD}$items_found${RESET}\n";

if ($orphaned_user_accesses > 0 || $orphaned_file_logs > 0) {
    my $orphaned_total = $orphaned_user_accesses + $orphaned_file_logs;
    print "Orphaned items found: ${YELLOW}${BOLD}$orphaned_total${RESET}\n";
}

print "\n";

# Detailed breakdown if issues found
if ($items_found > 0 || $orphaned_user_accesses > 0 || $orphaned_file_logs > 0) {
    print "${BOLD}${MAGENTA}Issues Breakdown:${RESET}\n";
    print "${DIM}" . "-" x 40 . "${RESET}\n";
    
    my $remaining_users = $schema->resultset('User')->search({
        username => { -in => ['viewer', 'first'] }
    })->count;
    if ($remaining_users > 0) {
        print "  ${RED}• Demo users remaining: $remaining_users${RESET}\n";
    }
    
    my $remaining_access = $schema->resultset('Access')->search({
        access => { -in => \@access_checks }
    })->count;
    if ($remaining_access > 0) {
        print "  ${RED}• Access groups remaining: $remaining_access${RESET}\n";
    }
    
    if ($file_access_count > 0) {
        print "  ${YELLOW}• File access logs: $file_access_count${RESET}\n";
    }
    
    if ($orphaned_user_accesses > 0) {
        print "  ${YELLOW}• Orphaned user accesses: $orphaned_user_accesses${RESET}\n";
    }
    
    if ($orphaned_file_logs > 0) {
        print "  ${YELLOW}• Orphaned file logs: $orphaned_file_logs${RESET}\n";
    }
    
    print "\n";
}

# Final Status
if ($items_found == 0 && $orphaned_user_accesses == 0 && $orphaned_file_logs == 0) {
    print "${GREEN}${BOLD}✓ SUCCESS: All fileserver demo data has been successfully removed!${RESET}\n";
    print "${GREEN}The database is clean.${RESET}\n";
} elsif ($items_found > 0) {
    print "${RED}${BOLD}✗ FAILURE: FileServer demo data still exists in the database!${RESET}\n";
    print "${RED}Please run the cleanup script to remove remaining items.${RESET}\n";
} else {
    print "${YELLOW}${BOLD}⚠ WARNING: Main data removed but orphaned items remain!${RESET}\n";
    print "${YELLOW}Consider running a deep cleanup to remove orphaned records.${RESET}\n";
}

print "${CYAN}=" x 70 . "${RESET}\n";

# Exit with appropriate code
# 0 = all clean, 1 = main items remain, 2 = only orphaned items remain
if ($items_found == 0 && $orphaned_user_accesses == 0 && $orphaned_file_logs == 0) {
    exit 0;
} elsif ($items_found > 0) {
    exit 1;
} else {
    exit 2;
}